import java.util.Random;/** *  Histogram Project:<br> * *   <code>Coin</code> objects simulate a coin that, when tossed, has an equal  *   probability of turning up heads or tails.  When the coin is first  *   constructed, both the <code>heads</code> and <code>tails</code> methods  *   will return <code>false</code>.  Once the <code>toss</code> method has been *   called for the first time, however, either <code>heads</code> or *   <code>tails</code> (but not both) will always be true.  Between  *   calls to the <code>toss</code> method, the <code>heads</code> and *   <code>tails</code> methods can be called as often as desired and will *   always return the same <code>true</code>/<code>false</code> value *   (in other words, the only way to change whether the coin is showing heads *   or tails is to toss the coin). *  *   <br>&nbsp;<br> *   By default, a <code>Coin</code> object will produce a different series *   of numbers (through repeated calls to the <code>toss</code> method) every *   time the program is run.  When testing, though, it is often useful to have *   a program generate the same sequence of numbers each time it is run; this *   can be achieved by specifying a "seed" before constructing coins. *  *   <br>&nbsp;<br> * Created: <br> *   circa 2000,  Alyce Brady (C++ version)<br> * <br> * Modifications: <br> *   17 January 2002, Pamela Cutter, Translated from C++ to Java <br> *   4 January 2003, Alyce Brady,   Made the random number generator static *                                  so that all coins use the same random *                                  number generator. <br>*   (date), (your name), Modified to .... <br> *  * @author Alyce Brady * @author Pamela Cutter * @version 4 January 2003 */public class Coin{    // Class Variable: Only one generator is created, shared by ALL coins.    private static Random theRandNumGenerator = new Random();    // Instance Variables: Encapsulated data for EACH coin    private boolean tossed;    private boolean showingHeads;  // Constructors    /** Constructs a coin that has not yet been tossed; neither     *  <code>heads</code> nor <code>tails</code> will return     *  <code>true</code> until the <code>toss</code> method is     *  invoked.  The coin is balanced, so each coin toss has     *  an equal (0.5) probability of turning up heads or tails.     **/    public Coin()    {        tossed = false;    }  // Methods    /** Seeds the random number generator used by coins.     *  The <code>static</code> keyword indicates that this method     *  does not have to be invoked on a specific <code>Coin</code>     *  object; instead, it can be invoked on the class, as in     *  <code>Coin.setSeed(longValue)</code>.      **/    public static void setSeed(long seed)    {        theRandNumGenerator.setSeed(seed);    }    /** Tosses this coin. **/    public void toss()    {        tossed = true;        showingHeads = (theRandNumGenerator.nextInt(2) == 1);    }    /** Reports whether the last coin toss came up heads.     *  (Precondition: coin has been tossed at least once.)     *      @return <code>true</code> if the last coin toss     *              resulted in a coin showing heads;     *              <code>false</code> otherwise.     **/    public boolean heads()    {        if (tossed) return (showingHeads);        else return false;    }    /** Reports whether the last coin toss came up tails.     *  (Precondition: coin has been tossed at least once.)     *      @return <code>true</code> if the last coin toss     *              resulted in a coin showing tails;     *              <code>false</code> otherwise.     **/    public boolean tails()    {        if (tossed) return (!showingHeads);        else return false;    }}  // end Coin class